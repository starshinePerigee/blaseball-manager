Let's get even more decoupled!

1. statsmonitor sucks really bad
2. pitchmonitor is kind of weird - we can do this with just messenger?

so basically, all the different pieces get initialized by ballgame, communicate over messenger naturally

how many bits do we have?

PitchListener
SwingListener
HitListener
BasepathsManager
FieldingListener


Question - these all need to access (and sometimes modify) game state.

Options:
1. A StateListener class, which each manager has a copy of, that subscribes to gamestate messengers
2. Provide a link to The Gamestate for each manager.

1:
+ provides cleaner interface
+ controls effects on gamestate

2:
+ performance
+ we're already doing 'globals' with


answer:
- use pointer to single state, with a messenger for when that state updates




do we really want a manager for every step?
- is there any time you would have a pitch without a swing?
-- yes: for testing, profiling, etc.



Do we want to make fielding more manager/messenger based?

should these cross-manager calls use a queue? should we set it up so these revert the callstack to the
uppermost level? (i think this is how messenger's queue works rn)


Ok, with the messenger refactor:
- all the managers use queue() to make sure they're events that go in the queue
- ballgame will instantiate the queue in normal situations.

- fielding uses the queue system?
- you have defense, runners on basepaths, the ballgame...



x. Fix gamestate passing
x. Fix manager / queueing
2.5: fix fouls to be part of hits
3. Refactor fielding to use queue
4. handle stats one way or another
5. fix tests lol