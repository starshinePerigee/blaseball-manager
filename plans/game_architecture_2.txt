assume we're using a messenger as previously established in the now-deleted game_architecture.txt

Here are some answers toa few questions:
1. where is question one
- when feather eventually learns to stop making numbered lists in text documents which don't auto-number

2. where is game logic
- game state logic is in ballgame.py > BallGame.
- individual action logic gets stepped through and called via pitchmanager.py and submodules

3. how are we structuring Messenger
- a messenger is a many to many communication stream
- a ballgame has its own internal messenger
- it also has a global synchronization messenger that only pumps send_tick()
- data escapes the parallel messengers because one statsmonitor can listen to many messengers

here's a longer summary:
AllGames is the top level manager class:
- creates ballgames
- sends out tick events
- interfaces with UI for timing
- manages cross-game communication (re: processes)
# todo: this does not yet exist

BallGame is your manager class
- initializes objects
- subscribes objects together
- receives ticks from AllGames and sends out ticks on its local platform
- local ticks carry a GameState
- listens for outs, runs, etc.
- tracks innings, batting orders, etc.

PitchManager is a listener to game timing
- takes a GameState and steps through it

Recorder is another listener
- saves and packages gamestates by At-Bat?
# todo: does not yet exist

4. How do we make sure everything that needs to subscribe to a ballgame subscribes to that ballgame?
- the allgames global game messenger is persistent and each new ballgame can send a "game start" message on it.