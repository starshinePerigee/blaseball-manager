This supercedes game_plan.txt.

All players have a location. Bases and the ball also have locations.

0. Locate ball position on ground.
1. determine closest fielder.
2. roll for catch
2a. if catch, mark runner out, all others have to tag up
2b. if no catch, add error time based on miss.
3. you now have the "safe time" - for each runner, calculate their position on the basepaths
4. each runner decides how much to go based on position, situation, speed, etc.
5. fielder looks at positions and decides who to throw to
6. make throw, roll for error
7. on error, add error time and return to 4,

4 can use the same logic as stealing?





second pass:

x1. roll for catch  <Catch()>
x2. if catch, mark runner out, mark all other runners tagging up <Basepaths.tag_up_all()>
x3. fielder decides where to throw <Fieldball.fielders_choice()>
4. roll for throw time <Throw()>
5. advance all runners by throw time <Basepaths.advance_all()>
6. check if player is out <Basepaths.check_out()>
7. go to 3

if not catch:
2. get safe time <Catch()>
3. advance all runners by safe time <Basepaths.advance_all()>
4. iterate through runners to decide <Basepaths.decide_all()>
5. fielder decides where to throw <Fieldball.fielders_choice()>
6. roll for throw time <Throw()>
7. advance all runners by throw time <Basepaths.advance_all()>
8. check if player is out <Basepaths.check_out()>
9. go to 4

you also need to:
- spawn rundowns
- spawn out Updates
- track and notify on double/triple plays
- track and notify home runs
- track and update stats

should these two modules (which are very tightly coupled) be one module?
- move FieldBall into singlepitch
- have throw, catch, runner, and even a new Fielder class in the Fielding class?
- that's pretty stacked.
- part of the issue is Basepaths is a very loaded class - it has all the runner logic, plus all the event handling.



third pass:

Fielder, Runner, Basepaths class
1. create a Catch
2. Catch creates a Fielder and a safe time
3a. If catch:
- add out (Catch should include this in itself as it's an Update)
- Basepaths.tag_up_all()
3b. if not catch:
- (leave runners at their leadoffs)
4. basepaths.advance_all(safe time, safe=True)
- this includes players reaching safe and staying there - as players reach bases they re-run Decide()
5. Fielder.fielders_choice()
- creates a Throw, which has a duration
- updates player, location, etc.
6. basepaths.advance_all(throw_time)
- advance can create run updates
7. basepaths.check_out
8. create thrown_out update or rundown update