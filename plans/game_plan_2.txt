OK starting with stats was the wrong approach. let's try this again!

Game
    Inning
        Side
            At-Bat
                Pitch
                    Actions
                    Throw
                    Live-ball

shed all the cruft around a pitch, dial in on a "Throw"

    Pitch: a single blaseball event, with no space between. includes the between pitch timing window, the player
    stepping up, the pitcher committing to pitch
    Actions: everything that happens in a game has a timing window - if the window is "whenever" it's a pitch action
    Throw: the  actual pitch from the moment the pitcher commits to the batter swinging
    Live-ball: everything that happens while the ball is live.

Anatomy of a pitch:
    - strike / ball
    - difficulty (how hard is this to hit?)
    - obscurity (how hard is this to read?)
    - reduction (if you hit it, how much is it reduced?)
    - effects

Anatomy of a hit:
    - speed
    - field angle (angle left/right)
    - launch angle (angle fly/ground)
    - effects

Generating a pitch:
    pitchers have two sliders:
        pitch type (trade power, trickiness, accuracy, and reduction)
        target (trade risk of ball for difficulty)
    trickiness turns into reduction and obscurity
    the further out a pitch is, the more difficulty, but past a ball it's a ball

to get a pitch, we generate a pitch intent.
    pitch *intent* + rolls = thrown pitch
    components:
        pitch type
        target location

before the player swings, the player generates a hit intent:
    - desperation (how biased they are for swinging)
    - target
    - effects

hit math:
    determine if the player is going to swing
    determine if the player hits, and if so, how good is the contact
    if hit:
        apply effects and reduction
    if miss / no swing:
        update count


so the anatomy of a throw looks like this:
    1. generate hit intent
    2. generate pitch intent
    3. roll pitch intent into a pitch
    4. from pitch + hit intent, decide if swing
    5. if swing, roll for hit and get hit quality
    6. if hit, translate hit quality into distance and angles
    7. check if foul, else live ball

as a reminder, here's the stats at play:
    hitting:
        power
        contact
        control
        discipline
    pitching:
        force
        accuracy
        trickery
    defense:
        calling
    transient:
        edge
        fear
        strategy (based on player, leadership?)

    (transient stats get rolled in separately - certain stat calls have different calls between
    "live" and "unmodified"?)

1. GENERATE HIT INTENT
    requires the following:
        desperation
        effects
    1. decide if effects
        each effect has its own criteria, which is managed by that effect
        for bunting, we decide based on:
            - pitcher fear +-0.4 total
            - player control + speed - player hitting +-0.5 total
            - runner on first/second? +0.3 for each
            - runner on third? -1
        these roll up into a "desire factor"
            all abilities have "desire" + "cooldown" + "base"
                base: if the desire is 1, how likely to use this ability
                cooldown: abilities can't be used within their cooldown period, plus each
                    n cooldown periods since this ability activated increases the desire
                    (logarithmically to 10x?)
                desire: built into the specific instance. in a "good opportunity", should result in approx. 1
        iterate through a player's abilities, rolling for each
            only two abilities at game start: bunt, called shot (trade foul chance for hit location)
        also include stats in the ability class for introspection (how often? highest cooldown? average wait since cd?)
    2. decide desperation
        based on count
        average of 1
    https://sabr.org/journal/article/study-of-the-count-yields-fascinating-data/


2. GENERATE PITCH INTENT
    requires the following:
        pitch type
        target location
    1. decide if effects
        each effect has its own criteria, managed by that effect
            see above for general effect management
        three effects at this time:
            iwalk
            knuckleball
            takedown (0.1 run for a strike, 0.1 for the other team for an on-base)
    2. decide target location:
        check stats worksheet for math

3. ROLL PITCH INTENT INTO A PITCH
    requires the following:
        location (0+)
        difficulty (0-2)
        obscurity (0-2)
        reduction (0-2) # slightly affected by pitch power
    1. use calling to assess game situation and determine target location
    2. roll for actual pitch location
    3. from pitch location and stats, create difficulty, obscurity, reduction, and strike?

4. Decide if swing
    requires the following:
        swing?
    https://blogs.fangraphs.com/lets-take-a-closer-look-at-hitter-swing-decisions/
    https://www.beyondtheboxscore.com/2014/6/4/5776990/swing-rate-ball-strike-counts-swinging-strikes

5. Roll for hit
    requires:
        hit quality

6. generate distance and angle
    requires:
        launch angle
        field angle
        speed
    https://tht.fangraphs.com/toward-a-probability-distribution-over-batted-ball-trajectories/
    https://baseballsavant.mlb.com/league
    https://fantasy.fangraphs.com/lets-talk-about-launch-angle-tightness/
    https://baseballcloud.blog/2021/02/08/what-goes-into-a-mlb-draft-model-batted-ball-profiles/


THOUGHTS ON REDUCTION

reduction as a stat is kinda weird. :t serves a few purposes:
1. allow a new kind of pitcher / aspect of pitcher skill
2. counter the trend towards three true outcomes as player power increases

right now, EV is based on:
normal(net contact) -> quality
normal(power + quality^exponent) -> EV

becuase net contact is the base of quality, force directly affects LA and EV.


so for #2, we can apply a flat modifier just fine; you can even apply it to oppose power if you want it to be
precise.

But for #1: a reduction pitcher (vs a force pitcher):
- depends on defense
- is less reliable
- is better at shutting down power hitters, worse vs. run manufacturers

also don't forget, since reduction is keyed off trickery, high reduction is also high obscurity
(this might get split though)

the core of the issue is hit quality scaling. right now, a home run can be driven entirely by contact:
get enough hit quality and anyone can get out of the park via hit quality exponent.

That exponent needs to be *negative*, so there's basically an upper bound - a good hit is a good hit, but
some players have the power to slug a good hit further (and some pitchers reduce all hits, so good /
mediocre hits get brought in most of the time)

for the swinginess factor, reduction should defs still use rand() instead of normal()