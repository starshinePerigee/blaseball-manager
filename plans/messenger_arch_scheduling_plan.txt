here's two linked issues with messenger:

1. often messenger calls will create more messenger calls, resulting in a call stack that can be difficult to
   parse/follow
2. order matters for messenger calls, but it (ideally) shouldn't or at least should be managable.

problem 1 example:
- subscribe a pitchmanager
- subscribe a countstoreall
- send game tick
countstoreall will receive pitchmanager's updates before the tick

problem 2 example:
- subscribe a pitchmanager
- subscribe a statsmonitor
- send game tick
statsmonitor will update with the wrong gamestate because it receives the tick after the pitchmanager


however, you can't just use a queue.
ex:
- eclipse weather manager
- pitchmanager
- eclipse receives tick, incinerates batter
- batter still bats


the root problem is, you have A and B who both affect C.
* is there ever a situation where A needs to affect C before B, and then later B needs to affect C before A?
* is game_tick the only issue?
** no, imagine a player that gets "fired up" on a meatball pitch, and gets a bonus - you could theoretically want them
   to get fired up in the middle of pitchmanager's handling, by responding to the send pitch


so options:
~ make order / priority a thing with messenger, so we can make sure listeners are executed in the correct order
~ weird per-listener queue thing?


what does the per-listener queue look like, and how is it different than a single queue.
- each listener has its own message queue
- as each listener is executed, it calls


#2 sucks and is janky.

Here's the plan:

1. clearer guidelines about messenger behavior
- try not to use messenger if you care about execution order per-message.
- try not to use messenger if you care about a response

2. add a pre-tick message so things that need to happen first happen first

3. add a priority setting for messenger registration (with default = 0)
